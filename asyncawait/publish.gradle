apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// This is the library version used when deploying the artifact
version = "0.7.1"

def siteUrl = 'https://github.com/metalabdesign/AsyncAwait'    // Homepage URL of the library
def gitUrl = 'https://github.com/metalabdesign/AsyncAwait.git' // Git repository URL
group = "co.metalab.asyncawait"                                // Maven Group ID for the artifact

configurations {
    optional
    compile.extendsFrom optional
}

install {
    repositories.mavenInstaller {

        pom.withXml {
            asNode().dependencies.dependency.findAll { xmlDep ->
                // mark optional dependencies
                if (project.configurations.optional.allDependencies.findAll { dep ->
                    xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                }) {
                    def xmlOptional = xmlDep.optional[0];
                    if (!xmlOptional) {
                        xmlOptional = xmlDep.appendNode('optional')
                    }
                    xmlOptional.value = 'true';
                }
            }
        }
        // This generates POM.xml with proper parameters
        pom {
            //noinspection GroovyAssignabilityCheck
            project {
                packaging 'aar'

                // Add your description here
                name 'A Kotlin coroutine implementation for Android'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'pilgr'
                        name 'Aleksey Masny'
                        email 'aleksey.masny@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "asyncawait"
        userOrg = "metalab"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}